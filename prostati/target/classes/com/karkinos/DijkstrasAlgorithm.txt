import java.util.*;

public static List<Node> findShortestPath(Map<Long, List<Edge>> graph, Node start, Node destination) {
    // Priority Queue for Dijkstraâ€™s algorithm (stores nodes with their current distances)
    PriorityQueue<NodeDistance> pq = new PriorityQueue<>(Comparator.comparingDouble(n -> n.distance));
    Map<Long, Double> distances = new HashMap<>();
    Map<Long, Node> previousNodes = new HashMap<>();

    // Initialize distances with infinity for all nodes, except the start node
    for (Long nodeId : graph.keySet()) {
        distances.put(nodeId, Double.MAX_VALUE);
    }
    distances.put(start.id, 0.0);
    pq.add(new NodeDistance(start, 0.0));

    // Dijkstra's algorithm main loop
    while (!pq.isEmpty()) {
        NodeDistance current = pq.poll();
        Node currentNode = current.node;

        // If we reached the destination, reconstruct the path
        if (currentNode.id == destination.id) {
            List<Node> path = new ArrayList<>();
            for (Node node = destination; node != null; node = previousNodes.get(node.id)) {
                path.add(node);
            }
            Collections.reverse(path);
            return path; // Return the path from start to destination
        }

        // Visit each neighboring node
        for (Edge edge : graph.get(currentNode.id)) {
            Node neighbor = edge.to;
            double newDist = distances.get(currentNode.id) + edge.distance;

            // If a shorter path to the neighbor is found
            if (newDist < distances.get(neighbor.id)) {
                distances.put(neighbor.id, newDist);
                previousNodes.put(neighbor.id, currentNode);
                pq.add(new NodeDistance(neighbor, newDist));
            }
        }
    }

    return Collections.emptyList(); // Return empty if no path found
}